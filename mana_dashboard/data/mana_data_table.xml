<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data>

        <!-- mana dashboard data table template one -->
        <record id="mana_dashboard.data_table_template_one" model="mana_dashboard.template">
            <field name="name">Data Table Template One</field>
			<field name="category">data_table</field>
            <field name="type">tabulator</field>
            <field name="component_type">tabulator</field>
            <field name="template">
<![CDATA[
]]>
            </field>
			
            <!-- styles -->
            <field name="styles">
<![CDATA[
]]>
            </field>
            <!-- scripts -->
            <field name="scripts">
<![CDATA[
try {
    let config = this.model.get('config');
    let data_source = this.get_data_source(0);

    let data_source_info = data_source.get_data_source_info();
    let model_fields = data_source_info.model_fields;
    let model = data_source_info.model_name;
    let domain = data_source_info.domain || [];
    let context = data_source_info.context || {};
    let user_context = this.getSession().user_context || {};

    if (!data_source || !data_source.is_valid()) {
        this.renderDefaultTable();
        return this;
    }

    // fliter hidden fields
    model_fields = model_fields.filter((field) => {
        return !data_source.is_hide_field(field.field_name);
    });

    // get column infos
    let column_infos = model_fields.map((field) => {
        let title = field.title;
        let raw_field = data_source.get_raw_field(field.field_name);
        if (raw_field && raw_field.alias) {
            title = raw_field.alias;
        }
        return {
            title: title,
            field: field.field_name,
            sorter: () => {
                switch (field.type) {
                    case 'char':
                    case 'text':
                    case 'html':
                    case 'selection':
                    case 'many2one':
                    case 'one2many':
                    case 'many2many':
                        return 'string';
                    case 'integer':
                    case 'float':
                    case 'monetary':
                        return 'number';
                    case 'boolean':
                        return 'boolean';
                    case 'date':
                    case 'datetime':
                        return 'date';
                    default:
                        return 'string';
                }
            },
            formatter: function(cell, formatterParams, onRendered){
                if (field.field_type == "many2one") {
                    let value = cell.getValue();
                    if (value && value[1]) {
                        return value[1];
                    }
                }
                return cell.getValue();
            },
            headerSort: true,
        }
    });

    this.table = new Tabulator(this.el, {
        height: "100%",
        pagination: true,
        columns: column_infos,
        data: data_source.get_raw_datas(),
        paginationSize: 5,
        paginationSizeSelector: [10, 25, 50, 100],
        sortMode: "local",
        renderMode: "basic",
        headerSortElement: function (column, dir) {
            switch (dir) {
                case "asc":
                    return "<i class='fa fa-sort-up'>";
                    break;
                case "desc":
                    return "<i class='fa fa-sort-down'>";
                    break;
                default:
                    return "<i class='fa fa-sort'>";
            }
        }
    });

    // row click event
    this.table.on("rowClick", (e, row) => {
        let data = row.getData();
        let data_source = this.get_data_source(0);
        let data_source_type_name = data_source.data_source_type;
        if (data_source_type_name == 'model') {
            let data_source_info = data_source.get_data_source_info();
            let model = data_source_info.model_name;
            let id = data.id;
            let widget = this.get_dashboard();
            if (data.__domain) {
                domain = data.__domain;
                widget.do_action({
                    type: 'ir.actions.act_window',
                    res_model: model,
                    res_id: id,
                    domain: domain,
                    views: [[false, 'tree'], [false, 'form']],
                    target: 'current',
                });
            } else {
                widget.do_action({
                    type: 'ir.actions.act_window',
                    res_model: model,
                    res_id: id,
                    views: [[false, 'form']],
                    target: 'current',
                });
            }
        }
    });

} catch (e) {
    this.el.innerHTML = 'Error in Qweb Template' + e;
}
]]>
            </field>
            <!-- multi_data_source -->
            <field name="multi_data_source">0</field>
            <field name="help">
<![CDATA[
]]>
            </field>
        </record>

    </data>
</odoo>